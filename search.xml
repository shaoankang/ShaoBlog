<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[UML课程整理（2）]]></title>
    <url>%2F2019%2F09%2F28%2FUML(2)%2F</url>
    <content type="text"><![CDATA[在UML类图中，常见的有以下几种关系:泛化（Generalization）, 实现（Realization）,关联（Association）,聚合（Aggregation）,组合(Composition)，依赖(Dependency) 1.泛化(Generalization)【泛化关系】：是一种继承关系,它指定了子类如何特化父类的所有特征和行为例如：老虎是动物的一种.且表示的关系最强 【箭头指向】：带三角箭头的实线，箭头指向父类 2.实现（Realization)【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现 【箭头指向】：带三角箭头的虚线，箭头指向接口 【接口】接口是一个特殊的类（无属性，有操作），实现接口操作的类（称为实现类）与接口之间存在实现关系。 3.关联（Association）【关联关系】：是一种拥有的关系,它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子。关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。 【代码体现】：成员变量 【箭头及指向】：带普通箭头的实心线，指向被拥有者 上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 上图为自身关联： 【单向关联】 聚合（Aggregation） 【聚合关系】：是整体与部分的关系.如车和轮胎是整体和部分的关系. 聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。 【代码体现】：成员变量 【箭头及指向】：带空心菱形的实心线，菱形指向整体 组合(Composition) 【组合关系】：是整体与部分的关系.,没有公司就不存在部门 组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期 【代码体现】：成员变量 【箭头及指向】：带实心菱形的实线，菱形指向整体 依赖(Dependency) 【依赖关系】：是一种使用的关系,所以要尽量不使用双向的互相依赖。 【代码表现】：局部变量、方法的参数或者对静态方法的调用，临时性 【箭头及指向】：带箭头的虚线，指向被使用者 各种关系的强弱顺序： 泛化= 实现&gt; 组合&gt; 聚合&gt; 关联&gt; 依赖 总结：下面这张UML图，比较形象地展示了各种类图关系： part2：1. 类图和对象图都是静态图的一部分，类图主要是用来显示系统中的类、接口以及它们 之间的静态结构和关系的一种静态模型。类图的3个基本组件：类名、属性、方法。]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓（1）]]></title>
    <url>%2F2019%2F09%2F25%2F%E7%BA%BF%E6%80%A7%E5%B8%83%E5%B1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[线性布局重点：1.&lt;LinearLayout&gt;线性布局2.android:orientation=“vertical”纵向布局3.android:orientation=“horizontal”横向布局 注意：无论是横向布局还是纵向布局，当控件超出屏幕，则不显示 布局嵌套布局是可以嵌套的，任何一种布局都可以看成一个控件，即一切皆控件。 android:gravity与layout_gravity区别： layout_gravity：是相对与它的父元素说的，说明元素显示在父元素的什么位置。 例如： 1234567891011121314151617&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@color/colorPrimaryDark&quot; android:orientation=&quot;vertical&quot; &gt; &lt;TextView android:layout_width=&quot;160dp&quot; android:layout_height=&quot;160dp&quot; android:background=&quot;@android:color/holo_purple&quot; android:textSize=&quot;12sp&quot; android:layout_gravity=&quot;center&quot; android:text=&quot;@string/text_msg&quot; /&gt;&lt;/LinearLayout&gt; 运行结果: android:layout_gravity=”center” android:layout_gravity=“right” 注意*：*当 android:orientation=“vertical” 时， 只有水平方向的设置才起作用，垂直方向的设置不起作用。即：left，right，center_horizontal 是生效的。当 android:orientation=“horizontal” 时， 只有垂直方向的设置才起作用，水平方向的设置不起作用。即：top，bottom，center_vertical 是生效的 android:gravity:是对元素本身说的，元素本身的文本显示在什么地方靠着换个属性设置，不过不设置默认是在左侧的。 例如： 123456789101112131415161718&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@color/colorPrimaryDark&quot; android:orientation=&quot;vertical&quot; &gt; &lt;TextView android:layout_width=&quot;160dp&quot; android:layout_height=&quot;160dp&quot; android:background=&quot;@android:color/holo_purple&quot; android:textSize=&quot;12sp&quot; android:layout_gravity=&quot;right&quot; android:gravity=&quot;center&quot; android:text=&quot;@string/text_msg&quot; /&gt;&lt;/LinearLayout&gt; 运行结果： android:gravity=”center” 总结：比如说button： android:layout_gravity 表示按钮在界面上的位置。 android:gravity表示button上的字在button上的位置 内边距(padding)与外边距(margin) 代码： 12345678910111213141516171819202122232425262728293031323334353637&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@color/colorPrimaryDark&quot; android:orientation=&quot;horizontal&quot; android:layout_gravity=&quot;top&quot; &gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;@android:color/holo_purple&quot; android:textSize=&quot;12sp&quot; android:text=&quot;@string/text_msg&quot; android:layout_marginTop=&quot;20dp&quot; android:layout_marginLeft=&quot;20dp&quot; /&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;@android:color/holo_orange_dark&quot; android:textSize=&quot;12sp&quot; android:text=&quot;@string/text_msg&quot; android:paddingTop=&quot;20dp&quot; android:layout_marginTop=&quot;20dp&quot; android:layout_marginLeft=&quot;20dp&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@android:color/holo_blue_dark&quot; android:textSize=&quot;12sp&quot; android:text=&quot;@string/text_msg&quot; android:layout_marginTop=&quot;20dp&quot; android:layout_marginLeft=&quot;20dp&quot; /&gt;&lt;/LinearLayout&gt; 运行结果： layout_weight属性此属性用于等分布局或控件位置 注意：1.当父控件布局是横向布局时，使用layout_weight属性要将layout_width=“0dp”2.当父控件布局是纵向布局时，使用layout_weight属性要将layout_height=“0dp” 常用控件之TextView,TextEdit,Button使用及属性控件是对数据和方法的封装。控件可以有自己的属性和方法。属性是控件数据的简单访问者。方法则是控件的一些简单而可见的功能。所有控件都是继承View类。 文本框与编辑框android中提供了两种文本组件：一种是文本框(TextView),用于在屏幕上显示文本；另外一种是编辑框(EditText),用于在屏幕上显示可编辑的文本框。EditText是TextView的子类，所以，很多EditView上的属性在TextView上也适用。 文本框标签是文本控件，用于文字显示的控件，常用的属性也有id,text,textSize,layout_width以及lay_height属性等，同时，该控件也可以用作间隔控件与控件间距的作用。 12345678910111213141516171819202122232425262728&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@android:color/holo_blue_light&quot; android:orientation=&quot;horizontal&quot; android:gravity=&quot;center_vertical&quot; &gt; &lt;Button android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;2&quot; android:text=&quot;@string/btn_msg&quot;/&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; /&gt; &lt;Button android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;2&quot; android:text=&quot;@string/btn_msg&quot;/&gt;&lt;/LinearLayout&gt; 运行结果： 编辑框标签是编辑框，由于是TextView的子类，所以，很多TextView的属性也适用于编辑框。 常用属性： android:hint:用于设置当编辑框中文本内容为空时，默认显示的提示文本android:inputType:用于指定当前编辑框输入内容的文本类型，其中常用有textPassword,phone等等android:singleLine:用于指定该编辑框是否为单行模式，其属性值为：true/false。 代码： 12345678910111213141516171819202122232425&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@android:color/holo_green_dark&quot; android:orientation=&quot;vertical&quot; &gt; &lt;EditText android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:hint=&quot;请输入用户名:&quot; android:textSize=&quot;15sp&quot; android:singleLine=&quot;true&quot; /&gt; &lt;EditText android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:hint=&quot;请输入密码:&quot; android:inputType=&quot;textPassword&quot; android:singleLine=&quot;true&quot; android:textSize=&quot;15sp&quot;/&gt;&lt;/LinearLayout&gt; 运行结果: 按钮android中提供了普通按钮和图片按钮两种按钮组件。 普通按钮标签和图片按钮 图片按钮常用属性： android:src:图片地址 代码： 1234567891011121314151617181920212223242526272829&lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@android:color/holo_blue_light&quot; android:orientation=&quot;horizontal&quot; android:gravity=&quot;center_vertical&quot; &gt; &lt;Button android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;2&quot; android:text=&quot;@string/btn_msg&quot;/&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; /&gt; &lt;ImageButton android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;2&quot; android:src=&quot;@mipmap/ic_launcher&quot; android:text=&quot;@string/btn_msg&quot;/&gt;&lt;/LinearLayout&gt; 运行结果：]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UML课程整理（1）]]></title>
    <url>%2F2019%2F09%2F22%2FUML%E8%AF%BE%E7%A8%8B%E6%95%B4%E7%90%86%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[第二章1.UML概述1.1概念：​ UML，Unified Modeling Language, 统一建模语言,是软件和系统开发的标准建模语言，他主要是以图形的方式对系统进行分析、设计. 1.2为什么要建模 因为不能完整的完整的理解一个系统，所以要建模 建模是未了更好的理解正在开发的系统 建模的目的 系统可视化 ​ 详细的说明系统的结构和行为 ​ 给出一个构造系统的模板 ​ 对决策文档化 1.3建模的原则​ 1.确定选择什么样的模型 ​ 2.考虑模型在不同精度上的表示 ​ 3.最好的模型是与现实相关联的，模型是对现实的简化，但简化不能漏掉任何重要的细节 ​ 4.单个模型是不充分的，一个重要的系统是由几个相对独立的模型去处理。（盲人摸象） 1.4UML的组成与介绍 1. 2.UML 不是开发工具，而是建模语言 3.UML 图细分：一类是静态图，一类是动态图。（1）静态图：用例图、类图、对象图、组件图和部署图；（2）动态图：顺序图、协作图、状态图和活动图。 4.常见的图包括什么： 类图（class Diagram）：描述类的信息（属性和方法），以及类和类之间的关系信息 用例图（user case Diagram）：站在系统用户和系统角色的角度分析系统存在哪些功能。 时序图（sequence Diagram）：描述程序的执行过程，方法的调用工程，方法返回值的信息。（即程序是如何一步一步的执行的，调用的。） 状态图 活动图]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理（1）]]></title>
    <url>%2F2019%2F09%2F22%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[存储器和CPU的连接]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[开学的小冲动就是见你]]></title>
    <url>%2F2019%2F09%2F01%2FLover1%2F</url>
    <content type="text"><![CDATA[​ 原来读到鲁迅先生的文章，有个驿站叫日暮里。假期的憧憬以为可以很快就能见到你，很期待那个小刚牙的你啊，臭小猪。 ​ 当然很长时间没法接吻真得对我来说无疑是个漫长得等待。如果可以，我想要带你去到那个地方，和你走过漫漫长夜，天色露白时交换一个亲吻，然后写下：我在日暮里想念每个清晨的吻。就像是说我在所有老去的时光里，热爱天真又温柔的你。]]></content>
      <categories>
        <category>爱情小故事</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>思考人生</tag>
      </tags>
  </entry>
</search>
